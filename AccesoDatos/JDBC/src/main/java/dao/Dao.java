package dao;

import pojos.Cliente;
import pojos.ClienteNuevo;
import pojos.LineaFactura;
import pojos.ResultadoListado;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Dao {
    Connection connection;
    public Dao(Connection connection) {
        this.connection = connection;
    }

    /**
     * Comprueba si la tabla CLIENTES existe y, si no, la crea.
     * Este m√©todo es idempotente, lo que significa que se puede ejecutar
     * varias veces sin causar errores ni cambios despu√©s de la primera ejecuci√≥n exitosa.
     *
     * @throws SQLException Si ocurre un error de acceso a la base de datos durante la operaci√≥n.
     */
    public void crearTablaClientesSiNoExiste() throws SQLException {
        // Define el nombre de la tabla que queremos comprobar/crear.
        final String nombreTabla = "CLIENTES";

        // 1. Obtener los metadatos de la base de datos a trav√©s de la conexi√≥n.
        // DatabaseMetaData nos proporciona m√©todos para explorar la estructura de la BBDD.
        DatabaseMetaData dbm = connection.getMetaData();

        // 2. Comprobar si la tabla "CLIENTES" ya existe.
        // getTables() devuelve un ResultSet con la lista de tablas que coinciden con el patr√≥n.
        // Pasamos null a cat√°logo y esquema para buscar en cualquier lugar, y el nombre exacto de la tabla.
        ResultSet tables = dbm.getTables(null, null, nombreTabla, null);

        // 3. Evaluar el resultado.
        if (tables.next()) {
            // Si tables.next() devuelve 'true', significa que el ResultSet tiene al menos una fila,
            // lo que confirma que la tabla ya existe.
            System.out.println("La tabla '" + nombreTabla + "' ya existe. No se requiere ninguna acci√≥n.");
        } else {
            // Si el ResultSet est√° vac√≠o, la tabla no existe y procedemos a crearla.
            System.out.println("La tabla '" + nombreTabla + "' no existe. Cre√°ndola...");

            // Usamos un bloque 'try-with-resources' para asegurar que el Statement se cierre autom√°ticamente.
            try (Statement stmt = connection.createStatement()) {
                // La sentencia DDL a ejecutar.
                String sql = "CREATE TABLE CLIENTES ("
                        + "DNI CHAR(9) NOT NULL, "
                        + "APELLIDOS VARCHAR(32) NOT NULL, "
                        + "CP CHAR(5), "
                        + "PRIMARY KEY(DNI))";

                // 4. Ejecutar la sentencia de creaci√≥n.
                // Usamos executeUpdate() para sentencias DDL (CREATE, ALTER, DROP) y DML (INSERT, UPDATE, DELETE).
                stmt.executeUpdate(sql);
                System.out.println("Tabla '" + nombreTabla + "' creada con √©xito.");
            }
        }
    }

    /**
     * Ejecuta una sentencia SQL de inserci√≥n utilizando un Statement.
     * ‚ö†Ô∏è ADVERTENCIA: Este m√©todo es vulnerable a inyecci√≥n SQL.
     * Es √∫til para fines educativos o para ejecutar sentencias completamente controladas,
     * pero no debe usarse con datos provenientes del usuario.
     *
     * @param conn La conexi√≥n activa a la base de datos.
     * @param sqlInsert La sentencia SQL completa para el INSERT (ej: "INSERT INTO CLIENTES...")
     * @throws SQLException Si ocurre un error al ejecutar la inserci√≥n.
     */
    public void insertarDatosConStatement(Connection conn, String sqlInsert) throws SQLException {
        // 1. Usar try-with-resources para asegurar que el Statement se cierre autom√°ticamente.
        // Un Statement es un objeto que representa una sentencia SQL.
        try (Statement stmt = conn.createStatement()) {

            // 2. Ejecutar la sentencia de inserci√≥n.
            // executeUpdate() devuelve el n√∫mero de filas afectadas (insertadas, actualizadas o borradas).
            int filasAfectadas = stmt.executeUpdate(sqlInsert);

            // 3. Informar del resultado.
            System.out.println("Inserci√≥n completada con √©xito. Filas afectadas: " + filasAfectadas);
        }
    }

    /**
     * Inserta una lista de clientes en la tabla CLIENTES1 usando un PreparedStatement.
     * Este m√©todo recibe una conexi√≥n ya existente.
     * Recepci√≥n de Connection: El m√©todo insertarClientes(Connection conn, ...)
     * no crea la conexi√≥n, sino que la recibe como par√°metro.
     * Esta es una excelente pr√°ctica conocida como inyecci√≥n de dependencias,
     * que hace que el m√©todo sea m√°s reutilizable y f√°cil de probar.
     * La responsabilidad de abrir y cerrar la conexi√≥n recae en quien llama al m√©todo.
     * PreparedStatement: Al usar ? como marcadores, evitamos la concatenaci√≥n de strings.
     * Esto nos protege contra ataques de inyecci√≥n SQL üõ°Ô∏è y permite que el motor de
     * la base de datos precompile la consulta, mejorando el rendimiento üöÄ si se ejecuta varias veces.
     * try-with-resources: La l√≠nea try (PreparedStatement pstmt = ...)
     * asegura que el objeto pstmt se cierre autom√°ticamente al finalizar el bloque,
     * previniendo fugas de recursos en la base de datos, incluso si ocurre un error.
     *
     * @param conn La conexi√≥n activa a la base de datos.
     * @param clientes La lista de clientes a insertar.
     */
    public void insertarClientes(Connection conn, List<Cliente> clientes) {
        // 1. Define la sentencia SQL con placeholders (?) para seguridad y rendimiento.
        String sql = "INSERT INTO CLIENTES (DNI, APELLIDOS, CP) VALUES (?, ?, ?)";

        // 2. Usa try-with-resources para asegurar que el PreparedStatement se cierre.
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {

            for (Cliente cliente : clientes) {
                // 3. Asigna los valores a los placeholders.
                pstmt.setString(1, cliente.getDni());      // Primer '?'
                pstmt.setString(2, cliente.getApellidos()); // Segundo '?'
                pstmt.setInt(3, cliente.getCodigoPostal()); // Tercer '?'

                // 4. Ejecuta la inserci√≥n para este cliente.
                int filasAfectadas = pstmt.executeUpdate();
                if (filasAfectadas > 0) {
                    System.out.println("Cliente insertado con √©xito: " + cliente.getApellidos());
                }
            }
        } catch (SQLException e) {
            System.err.println("Error al insertar los datos de los clientes.");
            // Imprime la traza del error para obtener m√°s detalles.
            e.printStackTrace();
        }
    }

    /**
     * Inserta clientes de forma m√°s eficiente usando procesamiento por lotes (batch).
     * Esto reduce dr√°sticamente la comunicaci√≥n con la base de datos.
     * Mejora: Inserci√≥n por Lotes (Batch Processing)
     *
     * Realizar una operaci√≥n de base de datos por cada cliente en un bucle puede ser ineficiente.
     * Es mucho m√°s r√°pido agrupar todas las inserciones
     * en un "lote" y enviarlas al servidor de base de datos de una sola vez.
     *
     * Esta versi√≥n es altamente recomendada para inserciones m√∫ltiples.
     *
     * @param conn La conexi√≥n activa a la base de datos.
     * @param clientes La lista de clientes a insertar.
     */
    public void insertarClientesBatch(Connection conn, List<Cliente> clientes) {
        String sql = "INSERT INTO CLIENTES (DNI, APELLIDOS, CP) VALUES (?, ?, ?)";

        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {

            for (Cliente cliente : clientes) {
                pstmt.setString(1, cliente.getDni());
                pstmt.setString(2, cliente.getApellidos());
                pstmt.setInt(3, cliente.getCodigoPostal());

                // En lugar de ejecutar, a√±ade la consulta al lote.
                pstmt.addBatch();
            }

            // Ejecuta todas las operaciones del lote en una sola llamada a la BD.
            int[] resultados = pstmt.executeBatch();

            System.out.println("Proceso por lotes finalizado. Total de clientes procesados: " + resultados.length);

        } catch (SQLException e) {
            System.err.println("Error durante la inserci√≥n por lotes.");
            e.printStackTrace();
        }
    }

    /**
     * Inserta clientes usando un lote dentro de una transacci√≥n controlada manualmente.
     * Si cualquier inserci√≥n falla, se revierten (rollback) todas las dem√°s.
     * * Inserta clientes de forma m√°s eficiente usando procesamiento por lotes (batch).
     *      * Esto reduce dr√°sticamente la comunicaci√≥n con la base de datos.
     *      * Mejora: Inserci√≥n por Lotes (Batch Processing)
     *      *
     *      * Realizar una operaci√≥n de base de datos por cada cliente en un bucle puede ser ineficiente.
     *      * Es mucho m√°s r√°pido agrupar todas las inserciones
     *      * en un "lote" y enviarlas al servidor de base de datos de una sola vez.
     *      *
     *      * Esta versi√≥n es altamente recomendada para inserciones m√∫ltiples.
     *
     * @param conn La conexi√≥n activa a la base de datos.
     * @param clientes La lista de clientes a insertar.
     */
    public void insertarClientesBatchConTransaccion(Connection conn, List<Cliente> clientes) {
        String sql = "INSERT INTO CLIENTES (DNI, APELLIDOS, CP) VALUES (?, ?, ?)";

        try {
            // ‚öôÔ∏è 1. INICIAR LA TRANSACCI√ìN
            // Desactivamos el modo auto-commit para controlar la transacci√≥n manualmente.
            conn.setAutoCommit(false);

            // Usamos try-with-resources para el PreparedStatement
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                for (Cliente cliente : clientes) {
                    pstmt.setString(1, cliente.getDni());
                    pstmt.setString(2, cliente.getApellidos());
                    pstmt.setInt(3, cliente.getCodigoPostal());
                    pstmt.addBatch();
                }

                // üöÄ 2. EJECUTAR EL LOTE
                System.out.println("Ejecutando el lote de inserciones...");
                pstmt.executeBatch();

                // ‚úÖ 3. CONFIRMAR LA TRANSACCI√ìN
                // Si executeBatch() no lanz√≥ una excepci√≥n, todo fue bien. Hacemos permanentes los cambios.
                conn.commit();
                System.out.println("¬°√âxito! La transacci√≥n ha sido confirmada (commit).");
            }
        } catch (SQLException e) {
            // ‚ùå 4. MANEJAR EL ERROR Y HACER ROLLBACK
            System.err.println("Error durante la inserci√≥n por lotes. Iniciando rollback...");
            try {
                if (conn != null) {
                    // Revertimos todos los cambios hechos desde el setAutoCommit(false)
                    conn.rollback();
                    System.out.println("El rollback se ha completado con √©xito.");
                }
            } catch (SQLException ex) {
                System.err.println("Error cr√≠tico al intentar hacer rollback.");
                ex.printStackTrace();
            }
            // Tambi√©n es √∫til imprimir el error original que caus√≥ el fallo
            e.printStackTrace();
        } finally {
            // üîÑ 5. RESTAURAR EL MODO ORIGINAL
            // Es una buena pr√°ctica devolver la conexi√≥n a su estado original.
            try {
                if (conn != null) {
                    conn.setAutoCommit(true);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    /**
     * Crea m√∫ltiples facturas, una por cada DNI de la lista, gestionando
     * cada una como una transacci√≥n independiente.
     * Si falla la creaci√≥n de una factura (por ejemplo, por un DNI inv√°lido),
     * solo se revierte esa factura espec√≠fica, y el programa intenta continuar con las siguientes.
     * Esto evita que un solo error invalide todo el lote.
     * La gesti√≥n de la transacci√≥n (setAutoCommit, commit, rollback) se encuentra dentro del bucle.
     * Esto crea un l√≠mite transaccional para cada factura. Si la factura del DNI 11223344A falla,
     * su rollback no afecta a la factura del DNI 78901234X que ya se confirm√≥ (commit) en la iteraci√≥n anterior.
     * El procesamiento es por lotes.
     * El uso de un bloque try-with-resources para los PreparedStatement asegura que se cierren
     * autom√°ticamente al finalizar, simplificando el c√≥digo.
     * El bloque finally: restaurar el estado original del autoCommit de la conexi√≥n, asegurando
     * que el m√©todo no deje la conexi√≥n en un estado inesperado.
     *
     * @param conn La conexi√≥n activa a la base de datos.
     * @param dnisClientes La lista de DNI de los clientes para quienes crear facturas.
     * @param lineas La lista de objetos LineaFactura a insertar en CADA factura.
     * @return Un Map que asocia cada DNI a su n√∫mero de factura generado con √©xito.
     * @throws SQLException Si ocurre un error irrecuperable con la conexi√≥n.
     */
    public static Map<String, Integer> crearFacturas(Connection conn, List<String> dnisClientes, List<LineaFactura> lineas) throws SQLException {
        String sqlInsertFactura = "INSERT INTO FACTURAS(DNI_CLIENTE) VALUES (?)";
        String sqlInsertLinea = "INSERT INTO LINEAS_FACTURA(NUM_FACTURA, LINEA_FACTURA, CONCEPTO, CANTIDAD) VALUES (?, ?, ?, ?)";

        // Guardamos el estado original del auto-commit para restaurarlo al final.
        boolean autoCommitOriginal = conn.getAutoCommit();
        // El mapa almacenar√° los resultados exitosos: DNI -> numFactura
        Map<String, Integer> facturasCreadas = new HashMap<>();

        try (PreparedStatement psInsertFact = conn.prepareStatement(sqlInsertFactura, PreparedStatement.RETURN_GENERATED_KEYS);
             PreparedStatement psInsertLinea = conn.prepareStatement(sqlInsertLinea)) {

            // Iteramos sobre cada DNI para crear su factura correspondiente.
            for (String dni : dnisClientes) {
                try {
                    // == INICIO DE LA TRANSACCI√ìN PARA UNA FACTURA ==
                    conn.setAutoCommit(false);

                    // 1. INSERTAR LA CABECERA DE LA FACTURA
                    psInsertFact.setString(1, dni);
                    psInsertFact.executeUpdate();

                    // 2. OBTENER LA CLAVE GENERADA
                    int numFacturaGenerado = -1;
                    try (ResultSet generatedKeys = psInsertFact.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            numFacturaGenerado = generatedKeys.getInt(1);
                        } else {
                            throw new SQLException("Error al crear la factura para el DNI " + dni + ", no se obtuvo ID.");
                        }
                    }

                    // 3. INSERTAR LAS L√çNEAS DE LA FACTURA (usando batch para eficiencia)
                    int numeroDeLinea = 1;
                    for (LineaFactura linea : lineas) {
                        psInsertLinea.setInt(1, numFacturaGenerado);
                        psInsertLinea.setInt(2, numeroDeLinea++);
                        psInsertLinea.setString(3, linea.getConcepto());
                        psInsertLinea.setInt(4, linea.getCantidad());
                        psInsertLinea.addBatch(); // Agregamos la inserci√≥n al lote
                    }
                    psInsertLinea.executeBatch(); // Ejecutamos el lote de l√≠neas

                    // == FIN DE LA TRANSACCI√ìN (√âXITO PARA ESTA FACTURA) ==
                    conn.commit();
                    facturasCreadas.put(dni, numFacturaGenerado); // Guardamos el resultado exitoso
                    System.out.println("√âXITO: Factura creada para DNI " + dni + " con n√∫mero " + numFacturaGenerado);

                } catch (SQLException e) {
                    // == ROLLBACK PARA LA FACTURA ACTUAL ==
                    // Si algo fall√≥ para este DNI, deshacemos sus cambios y continuamos con el siguiente.
                    System.err.println("FALLO: Ocurri√≥ un error para el DNI " + dni + ". Realizando rollback...");
                    conn.rollback();
                    e.printStackTrace(System.err);
                }
            }
        } finally {
            // == LIMPIEZA FINAL ==
            // Al final de todo el proceso, restauramos el estado original del auto-commit.
            conn.setAutoCommit(autoCommitOriginal);
        }

        return facturasCreadas;
    }

    /**
     * Llama a un procedimiento almacenado para obtener un listado de clientes.
     *
     * @param conn La conexi√≥n activa a la base de datos.
     * @param dni El DNI del cliente para filtrar (par√°metro de entrada).
     * @return Un objeto ResultadoListado que contiene la lista de clientes y el valor
     * del par√°metro INOUT.
     * @throws SQLException Si ocurre un error durante la comunicaci√≥n con la BBDD.
     */
    public static ResultadoListado llamarListadoClientes(Connection conn, String dni) throws SQLException {
        // La sintaxis "{call ...}" es el est√°ndar de JDBC para llamar a procedimientos.
        String sql = "{call listado_parcial_clientes(?,?)}"; // Asumimos 2 par√°metros

        List<Cliente> listaClientes = new ArrayList<>();
        int valorInOut;

        // Uso de try-with-resources para asegurar que el CallableStatement se cierre
        // autom√°ticamente, incluso si ocurre una excepci√≥n. Esto previene fugas de recursos.
        try (CallableStatement stmt = conn.prepareCall(sql)) {

            // 1. CONFIGURAR PAR√ÅMETROS
            // Par√°metro 1: DNI (de entrada, IN)
            stmt.setString(1, dni);

            // Par√°metro 2: Contador (de entrada/salida, INOUT)
            stmt.setInt(2, 0); // Valor inicial de entrada
            stmt.registerOutParameter(2, Types.INTEGER); // Se registra como par√°metro de salida

            // 2. EJECUTAR EL PROCEDIMIENTO
            // Se usa execute() porque el procedimiento puede devolver un ResultSet y par√°metros de salida.
            stmt.execute();

            // 3. RECUPERAR LOS RESULTADOS
            // Primero recuperamos el valor del par√°metro de salida (OUT o INOUT).
            valorInOut = stmt.getInt(2);

            // Luego, procesamos el ResultSet si existe.
            try (ResultSet rs = stmt.getResultSet()) {
                while (rs != null && rs.next()) {
                    String dniCliente = rs.getString("DNI");
                    String apellidosCliente = rs.getString("APELLIDOS");
                    listaClientes.add(new Cliente(dniCliente, apellidosCliente, -1));
                }
            } // El try-with-resources interno cierra el ResultSet autom√°ticamente.
        }

        // Devolvemos un objeto que encapsula todos los resultados.
        return new ResultadoListado(valorInOut, listaClientes);
    }

    public void obtenerYMostrarApellidosAlternativo(String dniCliente, Connection connection) {
        // Las funciones se pueden invocar directamente en una consulta SELECT.
        String sql = "SELECT obtener_apellidos_mejorado(?) AS apellidos";

        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {

            // **Paso 1: Establecer el par√°metro de entrada**
            pstmt.setString(1, dniCliente);

            // **Paso 2: Ejecutar la consulta**
            try (ResultSet rs = pstmt.executeQuery()) {
                // **Paso 3: Procesar el resultado**
                if (rs.next()) {
                    String apellidos = rs.getString("apellidos"); // O rs.getString(1)
                    System.out.println("‚úÖ Apellidos encontrados (m√©todo alternativo): " + apellidos);
                } else {
                    System.out.println("‚ö†Ô∏è La consulta no devolvi√≥ resultados.");
                }
            }

        } catch (SQLException e) {
            System.err.println("‚ùå Error en el m√©todo alternativo.");
            e.printStackTrace();
        }
    }

    /**
     * Realiza un conjunto de modificaciones en la tabla CLIENTES usando un ResultSet actualizable.
     * Modifica el CP del √∫ltimo cliente, borra el pen√∫ltimo e inserta uno nuevo.
     *
     * IMPORTANTE: Este m√©todo asume que se est√° ejecutando dentro de una transacci√≥n
     * gestionada por el c√≥digo que lo llama (no hace commit ni rollback).
     *
     * @param conn La conexi√≥n activa a la base de datos.
     * @param nuevoCpUltimoCliente El nuevo c√≥digo postal para el √∫ltimo cliente del resultset.
     * @param clienteAInsertar Un objeto ClienteNuevo con los datos del cliente a insertar.
     * @throws SQLException Si ocurre un error en la base de datos o el ResultSet est√° vac√≠o.
     */
    public static void modificarClientesConResultSet(Connection conn, String nuevoCpUltimoCliente, ClienteNuevo clienteAInsertar) throws SQLException {

        String sql = "SELECT DNI, APELLIDOS, CP FROM CLIENTES WHERE CP IS NOT NULL";

        // Usamos try-with-resources para el Statement y el ResultSet.
        // Esto garantiza que ambos se cierren autom√°ticamente, previniendo fugas de recursos.
        try (Statement sConsulta = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
             ResultSet rs = sConsulta.executeQuery(sql)) {

            // Verificamos que el ResultSet tenga al menos dos filas para poder operar
            if (!rs.last()) { // Mueve el cursor al final y devuelve false si est√° vac√≠o
                throw new SQLException("No hay clientes para modificar. El ResultSet est√° vac√≠o.");
            }
            if (rs.getRow() < 2) {
                throw new SQLException("Se necesitan al menos dos clientes para realizar la operaci√≥n completa.");
            }
            rs.first(); // Volvemos al principio para seguir la l√≥gica original

            // 1. MODIFICAR EL √öLTIMO CLIENTE
            rs.last(); // Nos posicionamos en el √∫ltimo registro
            rs.updateString("CP", nuevoCpUltimoCliente);
            rs.updateRow(); // Confirma la modificaci√≥n en la BBDD
            System.out.println("-> Fila actualizada.");

            // 2. BORRAR EL PEN√öLTIMO CLIENTE
            rs.previous(); // Nos movemos al pen√∫ltimo registro
            rs.deleteRow(); // Borra la fila actual de la BBDD
            System.out.println("-> Fila borrada.");

            // 3. INSERTAR UN NUEVO CLIENTE
            rs.moveToInsertRow(); // Movemos el cursor a una fila especial para inserci√≥n
            rs.updateString("DNI", clienteAInsertar.dni());
            rs.updateString("APELLIDOS", clienteAInsertar.apellidos());
            rs.updateString("CP", clienteAInsertar.cp());
            rs.insertRow(); // Confirma la inserci√≥n en la BBDD
            System.out.println("-> Nueva fila insertada.");

            // rs.moveToCurrentRow(); // Opcional: vuelve el cursor a la fila actual antes de la inserci√≥n
        }
    }

    /**
     * Inserta una lista de clientes en la base de datos utilizando un lote (batch).
     * Este m√©todo es mucho m√°s eficiente que hacer un INSERT por cada cliente.
     *
     * @param conn La conexi√≥n activa a la base de datos. Se asume que la gesti√≥n
     * de la transacci√≥n (commit/rollback) se hace fuera de este m√©todo.
     * @param clientes La lista de objetos Cliente a insertar.
     * @return Un array de enteros con los resultados de la ejecuci√≥n del lote.
     * @throws SQLException Si ocurre un error de base de datos.
     */
    public static int[] insertarClientesEnLote(Connection conn, List<Cliente> clientes) throws SQLException {
        String sql = "INSERT INTO CLIENTES(DNI, APELLIDOS, CP) VALUES (?, ?, ?)";

        // Usamos try-with-resources para asegurar que el PreparedStatement se cierre.
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {

            // Verificamos si la lista de clientes est√° vac√≠a para no hacer trabajo innecesario.
            if (clientes == null || clientes.isEmpty()) {
                System.out.println("La lista de clientes est√° vac√≠a, no se insertar√° nada.");
                return new int[0];
            }

            // Recorremos la lista de objetos Cliente. Este c√≥digo es mucho m√°s limpio y seguro.
            for (Cliente cliente : clientes) {
                // Usamos los getters del objeto, evitando errores por √≠ndice (ej: datosClientes[nCli][i]).
                stmt.setString(1, cliente.getDni());
                stmt.setString(2, cliente.getApellidos());
                stmt.setInt(3, cliente.getCodigoPostal());

                // Agregamos la sentencia configurada al lote.
                stmt.addBatch();
            }

            // Ejecutamos todas las sentencias del lote en una sola llamada a la base de datos.
            System.out.println("Ejecutando lote de inserci√≥n...");
            return stmt.executeBatch();
        }
    }
}


